{"version":3,"sources":["components/ColourSelector.js","components/NameDisplay.js","App.js","serviceWorker.js","index.js"],"names":["ColourBlock","colourBlock","_this$props","this","props","name","selectedColour","colour","onSelect","react_default","a","createElement","width","height","onClick","x","y","rx","ry","style","fill","stroke","strokeWidth","cursor","Fragment","Component","ColourSelector","className","textAlign","ColourSelector_ColourBlock","NameDisplay","heroname","superpower","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","animal","activity","errors","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","value","preventDefault","components_ColourSelector","type","placeholder","hidden","components_NameDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d51b1863.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ColourBlock extends Component {\n  render() {\n    const { name, selectedColour, colour, onSelect } = this.props;\n\n    let colourBlock;\n\n    if (name === selectedColour) {\n      colourBlock = (\n        <svg width=\"60\" height=\"60\" onClick={() => onSelect(name)}>\n          <rect\n            x=\"4\"\n            y=\"4\"\n            rx=\"10\"\n            ry=\"10\"\n            width=\"46\"\n            height=\"46\"\n            style={{\n              fill: colour,\n              stroke: \"#fff\",\n              strokeWidth: \"4\"\n            }}\n          />\n        </svg>\n      );\n    } else {\n      colourBlock = (\n        <svg width=\"60\" height=\"60\" onClick={() => onSelect(name)}>\n          <rect\n            x=\"2\"\n            y=\"2\"\n            rx=\"10\"\n            ry=\"10\"\n            width=\"50\"\n            height=\"50\"\n            style={{ fill: colour, cursor: \"pointer\" }}\n          />\n        </svg>\n      );\n    }\n\n    return <React.Fragment>{colourBlock}</React.Fragment>;\n  }\n}\n\nconst ColourSelector = props => {\n  return (\n    <div className=\"py-4\">\n      <h3 className=\"h4\">1. Pick your superhero's colour:</h3>\n      <div style={{ textAlign: \"center\" }}>\n        <ColourBlock\n          onSelect={props.onSelect}\n          name={\"Scarlet\"}\n          colour={\"#861c20\"}\n          selectedColour={props.colour}\n        />\n        <ColourBlock\n          onSelect={props.onSelect}\n          name={\"Sky\"}\n          colour={\"#447c8f\"}\n          selectedColour={props.colour}\n        />\n        <ColourBlock\n          onSelect={props.onSelect}\n          name={\"Golden\"}\n          colour={\"#a35d2e\"}\n          selectedColour={props.colour}\n        />\n        <ColourBlock\n          onSelect={props.onSelect}\n          name={\"Emerald\"}\n          colour={\"#427533\"}\n          selectedColour={props.colour}\n        />\n        <ColourBlock\n          onSelect={props.onSelect}\n          name={\"Pink\"}\n          colour={\"#b10e50\"}\n          selectedColour={props.colour}\n        />\n        <ColourBlock\n          onSelect={props.onSelect}\n          name={\"Lavender\"}\n          colour={\"#71598f\"}\n          selectedColour={props.colour}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ColourSelector;\n","import React, { Component } from \"react\";\n\nclass NameDisplay extends Component {\n  render() {\n    const { heroname, superpower } = this.props;\n    return (\n      <div className=\"px-4\">\n        <h3>Your Superhero Name is:</h3>\n        <p className=\"h1 text-center\">{heroname ? heroname : \"???\"}</p>\n        <br /> <h3>Your Superpower is:</h3>\n        <p className=\"h1 text-center mb-5\">{superpower ? superpower : \"???\"}</p>\n      </div>\n    );\n  }\n}\n\nexport default NameDisplay;\n","import React, { Component } from \"react\";\n\nimport ColourSelector from \"./components/ColourSelector\";\n\nimport \"./App.css\";\nimport NameDisplay from \"./components/NameDisplay\";\n\n/*\n- Build a simple single page app that generates and displays the name of a fictional superhero / villain for the user. (Optional) You could also include a special power.\n\n- Try using any combination of the following;  gender, favourite colour, favourite activity or favourite animal.\n*/\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colour: \"\",\n      animal: \"\",\n      activity: \"\",\n      errors: {},\n      heroname: \"\",\n      superpower: \"\"\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    this.setState({\n      heroname: this.state.colour + \" \" + this.state.animal,\n      superpower: this.state.activity,\n      colour: \"\",\n      animal: \"\",\n      activity: \"\"\n    });\n  }\n\n  onSelect(colour) {\n    this.setState({\n      colour: colour\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <header className=\"app-header\">\n            <h1 className=\"h2 py-5\">\n              SuperWho? - Generate Your Superhero Name!\n            </h1>\n          </header>\n          <div className=\"row main\">\n            <div className=\"col-md-6\">\n              <form onSubmit={this.onSubmit} className=\"col-md-10\">\n                <ColourSelector\n                  onSelect={this.onSelect}\n                  colour={this.state.colour}\n                />\n\n                <div className=\"form-group mb-4\">\n                  <h3 className=\"h4\">2. What's your favourite animal:</h3>\n                  <input\n                    type=\"text\"\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Type your favourite animal\"\n                    name=\"animal\"\n                    value={this.state.animal}\n                    onChange={this.onChange}\n                  />\n                </div>\n\n                <div className=\"form-group mb-4\">\n                  <h3 className=\"h4\">3. Select your favourite activity:</h3>\n                  <select\n                    className=\"form-control form-control-lg\"\n                    name=\"activity\"\n                    value={this.state.activity}\n                    onChange={this.onChange}\n                  >\n                    <option value=\"\" hidden>\n                      Please select one\n                    </option>\n                    <option value=\"Time Travel\">Netflix</option>\n                    <option value=\"Water Breathing\">Swimming</option>\n                    <option value=\"Superhuman Speed\">Running</option>\n                    <option value=\"Flying\">Travelling</option>\n                    <option value=\"Mind Control\">Socialising</option>\n                  </select>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-dark btn-lg mb-5\">\n                  Generate your name!\n                </button>\n              </form>\n            </div>\n\n            <div className=\"col-md-6\">\n              <NameDisplay\n                heroname={this.state.heroname}\n                superpower={this.state.superpower}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}